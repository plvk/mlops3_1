name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install flake8 black

      - name: Lint code
        run: |
          source venv/bin/activate
          flake8 ./*.py --exclude "venv, .venv" --ignore E501
          black --check ./*.py

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Registry
        run: echo "${{ secrets.ACCESS_TOKEN }}" | docker login ghcr.io -u plvk --password-stdin || exit 1

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE }} --build-arg branch=${{ github.ref_name }} .
          docker push ${{ secrets.DOCKER_IMAGE }}
          
  build_and_publish_package:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install setuptools wheel

      - name: Build Python package
        run: |
          source venv/bin/activate
          # python setup.py sdist bdist_wheel
          python setup.py sdist
          ls -la dist  # Выводим содержимое директории dist

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: dist/*

      - name: Publish package to PyPI Registry
        run: |
          python -m venv venv
          source venv/bin/activate
          # pip install twine
          pip install poetry
          poetry config pypi-token.pypi ${{ secrets.PYPI_PASSWORD }}
          poetry publish -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }}
          # twine upload dist/* -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --repository-url ${{ secrets.TWINE_REPOSITORY_URL }} --verbose
          
  docs:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies for docs
        run: |
          sudo apt-get update && sudo apt-get install -y wget curl texlive-xetex gdebi-core
          wget https://github.com/quarto-dev/quarto-cli/releases/download/v${{ secrets.QUARTO_VERSION }}/quarto-${{ secrets.QUARTO_VERSION }}-linux-amd64.deb
          sudo gdebi -n quarto-${{ secrets.QUARTO_VERSION }}-linux-amd64.deb

      - name: Build documentation
        run: |
          quarto render
          mkdir -p public
          cp -r _site/* public/

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: public/

  deploy_docs:
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          publish_dir: ./public
